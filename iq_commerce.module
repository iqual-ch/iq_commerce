<?php

/**
 * @file
 * Iq_commerce module file.
 */

use Drupal\commerce_order\Entity\OrderInterface;
use Drupal\commerce_product\Entity\ProductAttributeValue;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Locale\CountryManager;
use Drupal\Core\Url;
use Drupal\iq_commerce\Form\IqCommerceAdditionalSettingsForm;
use Drupal\iq_commerce\Form\IqCommerceSettingsForm;
use Drupal\views\ViewExecutable;
use Drupal\address\Plugin\Field\FieldType\AddressItem;
use Drupal\profile\Entity\Profile;
use Drupal\commerce_order\Adjustment;

/**
 * Implements hook_mail().
 */
function iq_commerce_mail($key, &$message, $params) {
  $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed';
  \Drupal::logger('iq_commerce')->notice($key);
  mb_internal_encoding("UTF-8");
  $message['subject'] = mb_encode_mimeheader($message['subject'], 'UTF-8', 'Q');
}

/**
 * Implements hook_theme().
 */
function iq_commerce_theme($existing, $type, $theme, $path) {
  return [
    'commerce_order_receipt' => [
      'template' => 'commerce/iq-commerce-order-receipt',
      'base hook' => 'commerce_order_receipt',
    ],
    'commerce_product' => [
      'render element' => 'elements',
    ],
    'page__user__login' => [
      'template' => 'layout/page--user--login',
      'base hook' => 'page',
    ],
    'page__user__orders__%' => [
      'template' => 'layout/page--user--orders--%',
      'base hook' => 'page',
    ],
    'page__user__password' => [
      'template' => 'layout/page--user--password',
      'base hook' => 'page',
    ],
    'page__user__register' => [
      'template' => 'layout/page--user--register',
      'base hook' => 'page',
    ],
    'menu__account' => [
      'template' => 'navigation/menu--account',
      'base hook' => 'menu',
    ],
    'user__full' => [
      'template' => 'user/user--full',
      'base hook' => 'user',
    ],
  ];
}

/**
 * Implements hook_theme_registry_alter().
 */
function iq_commerce_theme_registry_alter(&$theme_registry) {
  // Replace the path to the registered template and use the one from custom module.
  $theme_registry['commerce_order__user']['path'] = \Drupal::service('extension.list.module')->getPath('iq_commerce') . '/templates/commerce';
  $theme_registry['commerce_order_receipt']['path'] = \Drupal::service('extension.list.module')->getPath('iq_commerce') . '/templates/commerce';
  $theme_registry['commerce_checkout_form__with_sidebar']['path'] = \Drupal::service('extension.list.module')->getPath('iq_commerce') . '/templates/commerce';
  $theme_registry['swiftmailer']['path'] = \Drupal::service('extension.list.module')->getPath('iq_commerce') . '/templates/swiftmailer';
}

/**
 * Implements hook_views_data_alter().
 */
function iq_commerce_views_data_alter(array &$data) {
  $data['commerce_order_item']['edit_quantity']['field'] = [
    'title' => t('Quantity text field'),
    'help' => t('Adds a text field for editing the quantity.'),
    'id' => 'commerce_order_item_alter_quantity',
  ];

  // Adds shipping profile to be avaliable in view relationship.
  $data['commerce_shipment']['shipping_profile'] = [
    'title' => t('Shipping Profile'),
    'help' => t('Reference to the shipping profile of a commerce shipment.'),
    'relationship' => [
      'group' => 'Shipment',
      // Views name of the table being joined to from commerce_shipment.
      'base' => 'profile',
      // Database field name in profile for the join.
      'base field' => 'profile_id',
      // Real database field name in commerce_shipment for the join, to override
      // 'unique_dummy_name'.
      'field' => 'shipping_profile__target_id',
      // ID of relationship handler plugin to use.
      'id' => 'standard',
      'label' => t('Shipping Profile'),
    ],
  ];
}

/**
 * Implements hook_form_alter().
 */
function iq_commerce_form_alter(&$form, FormStateInterface $form_state, $form_id = '') {
  // If it is a commerce product variation edit form.
  if (substr((string) $form_id, 0, strlen('commerce_product_variation')) == 'commerce_product_variation' && substr((string) $form_id, 0 - (strlen('_edit_form')), strlen('_edit_form')) == '_edit_form') {
    foreach (array_keys($form) as $form_array_key) {
      // If there is an attribute field, sort the options by the weight.
      if (substr($form_array_key, 0, strlen('attribute_')) == 'attribute_') {
        uasort($form[$form_array_key]['widget']['#options'], function ($a, $b) use ($form_array_key) {
          $attribute_id = substr($form_array_key, strlen('attribute_'));
          if (!is_string($a)) {
            $a = $a->__toString();
          }
          $attribute_a_value = Drupal::entityTypeManager()->getStorage('commerce_product_attribute_value')
            ->loadByProperties(['attribute' => $attribute_id, 'name' => $a]);
          $attribute_a_value = reset($attribute_a_value);
          if ($attribute_a_value instanceof ProductAttributeValue) {
            $attribute_a_weight = $attribute_a_value->getWeight();
          }
          if (!is_string($b)) {
            $b = $b->__toString();
          }
          $attribute_b_value = Drupal::entityTypeManager()->getStorage('commerce_product_attribute_value')
            ->loadByProperties(['attribute' => $attribute_id, 'name' => $b]);
          $attribute_b_value = reset($attribute_b_value);
          if ($attribute_b_value instanceof ProductAttributeValue) {
            $attribute_b_weight = $attribute_b_value->getWeight();
          }
          if (isset($attribute_a_weight) && isset($attribute_b_weight)) {
            return $attribute_a_weight - $attribute_b_weight;
          }
          else {
            return 0;
          }
        });
      }
    }
  }
  // Override the cart view.
  if (substr((string) $form_id, 0, strlen('views_form_commerce_cart_form_default')) == 'views_form_commerce_cart_form_default') {
    $iq_commerce_additional_settings = IqCommerceAdditionalSettingsForm::getIqCommerceAdditionalSettings();
    // Check for the additional settings (cart header and size).
    if (!empty($iq_commerce_additional_settings['cart_header'])) {
      $cart_header = $iq_commerce_additional_settings['cart_header'];

      // Show the cart header accordingly.
      $form['cart_header'] = [
        '#type' => 'markup',
        '#markup' => $cart_header,
        '#weight' => -1,
      ];
    }
  }
  // Add the tax rate for each product type.
  if ($form_id == 'commerce_product_type_edit_form') {
    $tax_type = \Drupal::service('plugin.manager.commerce_tax_type')->createInstance('swiss_vat');
    $zones = $tax_type->getZones();
    /** @var \Drupal\commerce_tax\TaxZone $zone */
    $zone = reset($zones);
    $rates = $zone->getRates();
    $rate_labels = [];
    foreach ($rates as $rate) {
      $rate_labels[$rate->getId()] = $rate->getLabel() . ' - ' . $rate->getPercentage()->toString();
    }
    /** @var \Drupal\commerce_product\Entity\ProductType $product_type_entity */
    $product_type_entity = $form_state->getFormObject()->getEntity();
    if (!empty($product_type_entity)) {
      $default_tax_rate = $product_type_entity->getThirdPartySetting('iq_commerce', 'tax_rate');
      $form['tax_rate'] = [
        '#type' => 'select',
        '#title' => t('Tax Rate'),
        '#options' => $rate_labels,
        '#default_value' => $default_tax_rate,
      ];
    }

    $form['actions']['submit']['#submit'][] = 'iq_commerce_product_type_form_submit';
  }

  // Pencil icons on Checkout.
  $url = Url::fromRoute('<current>');
  if ($form_id == 'commerce_checkout_flow_multistep_default' && substr_count($url->getInternalPath(), 'review') > 0) {
    $node_id = explode('/', $url->getInternalPath());
    $node_id = $node_id[1];
    if (!empty($node_id)) {
      if (!empty($form['review']['payment_information'])) {
        $form['review']['payment_information']["#title"] = t('Payment information') . '&nbsp;&nbsp;&nbsp;&nbsp;' . '<a class="order-checkout-pencil-icon" href="/de/checkout/' . $node_id . '/order_information"><i class="fa fa-pencil"></i></a>';
      }
      if (!empty($form['review']['shipping_information'])) {
        $form['review']['shipping_information']["#title"] = t('Shipping information') . '&nbsp;&nbsp;&nbsp;&nbsp;' . '<a class="order-checkout-pencil-icon" href="/de/checkout/' . $node_id . '/order_information"><i class="fa fa-pencil"></i></a>';
      }
      if (!empty($form['review']['customer_comments'])) {
        $form['review']['customer_comments']["#title"] = t('Additional information') . '&nbsp;&nbsp;&nbsp;&nbsp;' . '<a class="order-checkout-pencil-icon" href="/de/checkout/' . $node_id . '/order_information"><i class="fa fa-pencil"></i></a>';
      }
      if (!empty($form['review']['contact_information'])) {
        $form['review']['contact_information']["#title"] = t('Contact information') . '&nbsp;&nbsp;&nbsp;&nbsp;' . '<a class="order-checkout-pencil-icon" href="/de/checkout/' . $node_id . '/order_information"><i class="fa fa-pencil"></i></a>';
      }
    }
  }

  // Add the rounding option to the shop and save to the config.
  if ($form_id === 'commerce_store_online_edit_form') {
    if (!property_exists($form_state->getFormObject(), 'entity')) {
      return;
    }
    $config = \Drupal::configFactory()->getEditable('iq_commerce.config');
    $configName = 'enable_rounding_' . str_replace(' ', '_', $form_state->getFormObject()->getEntity()->name->value);
    $form['round_price'] = [
      '#type' => 'checkbox',
      '#weight' => 20,
      '#title' => t('Round prices'),
      '#default_value' => $config->get($configName),
    ];
    if (count($form_state->getUserInput()) != 0) {
      if (array_key_exists('round_price', $form_state->getUserInput())) {
        $config->set($configName, $form_state->getUserInput()['round_price'])->save();
      }
      else {
        $config->set($configName, FALSE)->save();
      }

    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 *
 * Adds rounding adjustment to the total price on presave of the order.
 */
function iq_commerce_commerce_order_presave($entity) {
  if ($entity->getEntityTypeId() == 'commerce_order') {
    $config = \Drupal::configFactory()->getEditable('iq_commerce.config');
    $configName = 'enable_rounding_' . str_replace(' ', '_', $entity->store_id->entity->name->value);
    if ($config->get($configName) == 0) {
      return;
    }

    $rounder = \Drupal::service('commerce_price.rounder');
    $order_total = $entity->getTotalPrice();
    if ($order_total == NULL) {
      return;
    }
    // // Rounds down 10.21 and 10.22 to 10.20, rounds up 10.23 and 10.24 to 10.25.
    $rounded_total = $rounder->round($order_total->divide(5))->multiply(5);
    $difference = $rounded_total->subtract($order_total);
    if ($difference->getNumber() > 0) {
      $entity->addAdjustment(new Adjustment([
        'type' => 'rounding',
        'label' => t('Rounding'),
        'amount' => $difference,
      ]));
    }
  }
}

/**
 * Set tax rate as third party setting on the entity type.
 *
 * @param array $form
 *   The submitted form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The submitted form state.
 */
function iq_commerce_product_type_form_submit(&$form, FormStateInterface $form_state) {
  /** @var \Drupal\commerce_product\Entity\ProductType $product_type_entity */
  $product_type_entity = $form_state->getFormObject()->getEntity();
  $product_type_entity->setThirdPartySetting('iq_commerce', 'tax_rate', $form_state->getValue('tax_rate'));
  $product_type_entity->save();
}

/**
 * Implements hook_views_pre_render().
 */
function iq_commerce_views_pre_render(ViewExecutable $view) {
  if ($view->id() == 'variant_catalog') {

    // Array of nodes to prevent duplicates.
    $variation_ids = [];
    // Manipulated results.
    $resultNoDoubleNodes = [];
    $i = 0;
    // Check each node of the result array on it's nid.
    foreach ($view->result as $row) {

      $variation_id = $row->commerce_product_variation_field_data_commerce_product__vari_1;
      // If this node isn't a duplicate.
      if (!in_array($variation_id, $variation_ids)) {
        $row->index = $i;
        $i++;
        // Add it to the manipulated results.
        $resultNoDoubleNodes[] = $row;
        // Mark this nid as in results to prevent duplicates from now on.
        $variation_ids[] = $variation_id;
      }
    }
    // Replace the old results with the results without duplicates.
    $view->result = $resultNoDoubleNodes;
  }
  if ($view->id() == "commerce_cart_form") {
    $store = \Drupal::service('commerce_store.current_store')->getStore();
    $cart = \Drupal::service('commerce_cart.cart_provider')
      ->getCart('default', $store);
    $cart->recalculateTotalPrice();
    $cart->setRefreshState(OrderInterface::REFRESH_ON_SAVE);
    $cart->save();
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function iq_commerce_preprocess_commerce_order_receipt(&$variables) {
  $iq_commerce_settings = IqCommerceSettingsForm::getIqCommerceSettings();
  $variables['iq_commerce_footer'] = $iq_commerce_settings['footer']['value'];
  $variables['iq_commerce_header'] = $iq_commerce_settings['header']['value'];
  $variables['iq_commerce_homepage'] = Url::fromRoute('<front>');

  /** @var Drupal\commerce_order\Entity\OrderInterface $order */
  $order = $variables['order_entity'];
  $shipments = $order->shipments->referencedEntities();
  /** @var \Drupal\commerce_shipping\Entity\Shipment $shipment */
  $shipment = reset($shipments);
  /** @var \Drupal\address\Plugin\Field\FieldType\AddressItem $address */
  $address = $shipment->getShippingProfile()->get('address')->first();
  if (!empty($address)) {
    $variables['full_name'] = $address->getGivenName() . ' ' . $address->getFamilyName();
    $countries = CountryManager::getStandardList();
    $full_country_name = $countries[$address->getCountryCode()]->__toString();
    $variables['shipping_address'] = '<p>' . $address->getGivenName() . ' ' . $address->getFamilyName() . '</p><p>' . $address->getAddressLine1() . '</p><p>' . $address->getPostalCode() . ' ' . $address->getLocality() . '</p><p>' . $full_country_name . '</p>';
  }
  $billing_profile = $order->getBillingProfile();
  $billing_address = $billing_profile->address->first();
  $full_country_name = $countries[$billing_address->getCountryCode()]->__toString();
  $variables['billing_address'] = '<p>' . $billing_address->getGivenName() . ' ' . $billing_address->getFamilyName() . '</p><p>' . $billing_address->getAddressLine1() . '</p><p>' . $billing_address->getPostalCode() . ' ' . $billing_address->getLocality() . '</p><p>' . $full_country_name . '</p>';
  if (!empty($shipment->get('shipping_method')->entity)) {
    $variables['shipping_method'] = $shipment->get('shipping_method')->entity->getName();
  }

  // Path to logo.
  $activeTheme = \Drupal::theme()->getActiveTheme()->getName();
  $logoPath = \Drupal::config($activeTheme . '.settings')->get('logo.path');
  if ($wrapper = \Drupal::service('stream_wrapper_manager')->getViaUri($logoPath)) {
    $variables['path_to_logo'] = $wrapper->getExternalUrl();
  }
}

/**
 * Implements hook_page_attachments().
 */
function iq_commerce_page_attachments(array &$attachments) {
  $attachments['#attached']['library'][] = 'iq_commerce/catalog';
  $attachments['#attached']['library'][] = 'iq_commerce/categories';
  $attachments['#attached']['library'][] = 'iq_commerce/checkout';
  $attachments['#attached']['library'][] = 'iq_commerce/order';
  $attachments['#attached']['library'][] = 'iq_commerce/cart';
}

/**
 * Implemenets hook_preprocess_commerce_order().
 */
function iq_commerce_preprocess_commerce_order(&$variables) {
  /** @var Drupal\commerce_order\Entity\OrderInterface $order */
  $order = $variables['order_entity'];
  $shipments = $order->get('shipments')->referencedEntities();
  /** @var \Drupal\commerce_shipping\Entity\Shipment $shipment */
  $shipment = reset($shipments);
  if (!empty($shipment)) {
    $shipping_profile = $shipment->getShippingProfile();

    /** @var \Drupal\address\Plugin\Field\FieldType\AddressItem $address */
    $address = $shipping_profile->get('address')->first();

    if (!empty($address)) {
      $variables['shipping_address'] = iq_commerce_get_address_string($address, $shipping_profile);
    }
    if (!empty($shipment->get('shipping_method')->entity)) {
      $variables['shipping_method'] = $shipment->get('shipping_method')->entity->getName();
      $amount = @reset($shipment->get('amount')->getValue());
      if (!empty($amount)) {
        $variables['shipping_rate'] = intval($amount['number']) . ' ' . $amount['currency_code'];
      }
    }
  }
  $billing_profile = $order->getBillingProfile();
  $billing_address = $billing_profile->get('address')->first();
  $variables['billing_address'] = iq_commerce_get_address_string($billing_address, $billing_profile);
}

/**
 * Builds a address string for email and oder overview template.
 *
 * @param Drupal\address\Plugin\Field\FieldType\AddressItem $address
 *   Address fields from the shipping/billing form.
 * @param Drupal\profile\Entity\Profile $profile
 *   User profile billing/shipping fields.
 *
 * @return string
 *   String containing address fields.
 */
function iq_commerce_get_address_string(AddressItem $address, Profile $profile) {
  $countries = CountryManager::getStandardList();
  $full_country_name = $countries[$address->getCountryCode()]->__toString();
  $address_string = !empty($address->getOrganization()) ? $address->getOrganization() . '<br />' : '';
  $address_string .= !empty($profile->field_st_firmenzusatz->value) ? $profile->field_st_firmenzusatz->value . '<br />' : '';
  $address_string .= !empty($profile->field_st_salutation->value) ? $profile->field_st_salutation->getSettings()['allowed_values'][$profile->field_st_salutation->value] . ' ' : '';
  $address_string .= !empty($profile->field_st_title->value) ? $profile->field_st_title->value . ' ' : '';
  $address_string .= $address->getGivenName() . ' ' . $address->getFamilyName() . '<br />' . $address->getAddressLine1() . '<br />';
  $address_string .= !empty($address->getAddressLine2()) ? $address->getAddressLine2() . '<br />' : "";
  $address_string .= $address->getPostalCode() . ' ' . $address->getLocality() . '<br/>' . $full_country_name;
  return $address_string;
}
