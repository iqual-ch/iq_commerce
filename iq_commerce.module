<?php

use Drupal\commerce_tax\Entity\TaxType;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_preprocess_HOOK().
 */
function iq_commerce_preprocess_menu__main(&$variables) {
  $cartProvider = \Drupal::service('commerce_cart.cart_provider');
  $carts = $cartProvider->getCarts();
  $carts = array_filter($carts, function ($cart) {
    /** @var \Drupal\commerce_order\Entity\OrderInterface $cart */
    // There is a chance the cart may have converted from a draft order, but
    // is still in session. Such as just completing check out. So we verify
    // that the cart is still a cart.
    return $cart->hasItems() && $cart->cart->value;
  });
  $count = 0;
  $cart_views = [];
  if (!empty($carts)) {
    foreach ($carts as $cart_id => $cart) {
      foreach ($cart->getItems() as $order_item) {
        $count += (int) $order_item->getQuantity();
      }
    }
  }

  foreach ($variables['items'] as $key => $item) {
    if ($item['title'] == 'Cart') {
      $item['title'] = 'Cart ('. $count . ')';
      $variables['items'][$key] = $item;
    }
  }
}

/**
 * Implements hook_mail().
 */
function iq_commerce_mail($key, &$message, $params) {
  $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed';
  \Drupal::logger('iq_commerce')->notice($key);
  mb_internal_encoding("UTF-8");
  $message['subject'] = mb_encode_mimeheader($message['subject'],'UTF-8','Q');
}
/**
 * Implements hook_theme().
 */
function iq_commerce_theme($existing, $type, $theme, $path) {
  return [
    'commerce_order_receipt' => [
      'template' => 'iq-commerce-order-receipt',
      'base hook' => 'commerce_order_receipt',
    ],
  ];
}

/**
 * Implements hook_views_data_alter().
 */
function iq_commerce_views_data_alter(array &$data) {
  $data['views']['alter_cart_quantity_field'] = [
    'title' => t('Quantity edit form'),
    'help' => t('Form to alter the quantity of a cart item'),
    'field' => [
      'id' => 'alter_cart_quantity_field',
    ],
  ];
}

/**
 * Implements hook_form_alter().
 */
function iq_commerce_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  // Add the tax rate for each product type.
  if ($form_id == 'commerce_product_type_edit_form') {
    $tax_type = \Drupal::service('plugin.manager.commerce_tax_type')->createInstance('swiss_vat');
    $zones = $tax_type->getZones();
    /** @var \Drupal\commerce_tax\TaxZone $zone */
    $zone = reset($zones);
    $rates = $zone->getRates();
    $rate_labels = [];
    foreach ($rates as $rate) {
      $rate_labels[$rate->getId()] = $rate->getLabel() . ' - ' . $rate->getPercentage()->toString();
    }
    /** @var \Drupal\commerce_product\Entity\ProductType $product_type_entity */
    $product_type_entity = $form_state->getFormObject()->getEntity();
    if (!empty($product_type_entity)) {
      $default_tax_rate = $product_type_entity->getThirdPartySetting('iq_commerce', 'tax_rate');
      $form['tax_rate'] = [
        '#type' => 'select',
        '#options' => $rate_labels,
        '#default_value' => $default_tax_rate
      ];
    }

    $form['actions']['submit']['#submit'][] = 'iq_commerce_product_type_form_submit';
  }
}

function iq_commerce_product_type_form_submit(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  /** @var \Drupal\commerce_product\Entity\ProductType $product_type_entity */
  $product_type_entity = $form_state->getFormObject()->getEntity();
  $product_type_entity->setThirdPartySetting('iq_commerce',  'tax_rate', $form_state->getValue('tax_rate'));
  $product_type_entity->save();
}
