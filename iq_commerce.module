<?php

use Drupal\commerce_tax\Entity\TaxType;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_mail().
 */
function iq_commerce_mail($key, &$message, $params) {
  $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed';
  \Drupal::logger('iq_commerce')->notice($key);
  mb_internal_encoding("UTF-8");
  $message['subject'] = mb_encode_mimeheader($message['subject'],'UTF-8','Q');
}

/**
 * Implements hook_theme().
 */
function iq_commerce_theme($existing, $type, $theme, $path) {
  return [
    'commerce_order_receipt' => [
      'template' => 'iq-commerce-order-receipt',
      'base hook' => 'commerce_order_receipt',
    ],
    'commerce_product' => [
      'render element' => 'elements',
    ],
  ];
}

/**
 * Implements hook_views_data_alter().
 */
function iq_commerce_views_data_alter(array &$data) {
  $data['commerce_order_item']['edit_quantity']['field'] = [
    'title' => t('Quantity text field'),
    'help' => t('Adds a text field for editing the quantity.'),
    'id' => 'commerce_order_item_alter_quantity',
  ];
}

/**
 * Implements hook_form_alter().
 */
function iq_commerce_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  // Override the cart view.
  if (substr($form_id, 0, strlen('views_form_commerce_cart_form_default')) == 'views_form_commerce_cart_form_default') {
    $iq_commerce_additional_settings = \Drupal\iq_commerce\Form\IqCommerceAdditionalSettingsForm::getIqCommerceAdditionalSettings();
    // Check for the additional settings (cart header and size).
    if (!empty($iq_commerce_additional_settings['cart_header']) && !empty($iq_commerce_additional_settings['cart_header_size'])) {
      $cart_header = $iq_commerce_additional_settings['cart_header'];
      $cart_header_size = $iq_commerce_additional_settings['cart_header_size'];

      // Show the cart header accordingly.
      $form['cart_header'] = [
        '#type' => 'markup',
        '#markup' => '<h' . $cart_header_size . '>' . t($cart_header) . '</h' . $cart_header_size . '>',
        '#weight' => -1
      ];
    }
  }
  // Add the tax rate for each product type.
  if ($form_id == 'commerce_product_type_edit_form') {
    $tax_type = \Drupal::service('plugin.manager.commerce_tax_type')->createInstance('swiss_vat');
    $zones = $tax_type->getZones();
    /** @var \Drupal\commerce_tax\TaxZone $zone */
    $zone = reset($zones);
    $rates = $zone->getRates();
    $rate_labels = [];
    foreach ($rates as $rate) {
      $rate_labels[$rate->getId()] = $rate->getLabel() . ' - ' . $rate->getPercentage()->toString();
    }
    /** @var \Drupal\commerce_product\Entity\ProductType $product_type_entity */
    $product_type_entity = $form_state->getFormObject()->getEntity();
    if (!empty($product_type_entity)) {
      $default_tax_rate = $product_type_entity->getThirdPartySetting('iq_commerce', 'tax_rate');
      $form['tax_rate'] = [
        '#type' => 'select',
        '#title' => t('Tax Rate'),
        '#options' => $rate_labels,
        '#default_value' => $default_tax_rate
      ];
    }

    $form['actions']['submit']['#submit'][] = 'iq_commerce_product_type_form_submit';
  }
  $url = \Drupal\Core\Url::fromRoute('<current>');

  if ($form_id == 'commerce_checkout_flow_multistep_default' && substr_count($url->getInternalPath(),'order_information') > 0) {
    // Unset the "Go back" link and create a custom one.
    unset($form['actions']['next']['#suffix']);
    $form['back_to_cart'] = [
      '#type' => 'markup',
      '#markup' => '<a class="iqbm-button iqbm-text btn btn-cta" href="/cart">' . t('Back to Cart') . '</a>'
    ];
  }
}

function iq_commerce_product_type_form_submit(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  /** @var \Drupal\commerce_product\Entity\ProductType $product_type_entity */
  $product_type_entity = $form_state->getFormObject()->getEntity();
  $product_type_entity->setThirdPartySetting('iq_commerce',  'tax_rate', $form_state->getValue('tax_rate'));
  $product_type_entity->save();
}

/**
 * Implements hook_views_pre_render().
 */
function iq_commerce_views_pre_render(\Drupal\views\ViewExecutable $view) {
  if ($view->id() == 'variant_catalog') {

    // Array of nodes to prevent duplicates.
    $variation_ids = [];
    // Manipulated results.
    $resultNoDoubleNodes = [];
    $i = 0;
    // Check each node of the result array on it's nid.
    foreach ($view->result as $row) {

      $variation_id = $row->commerce_product_variation_field_data_commerce_product__vari_1;
      // If this node isn't a duplicate.
      if (!in_array($variation_id, $variation_ids)) {
        $row->index = $i;
        $i++;
        // Add it to the manipulated results.
        $resultNoDoubleNodes[] = $row;
        // Mark this nid as in results to prevent duplicates from now on.
        $variation_ids[] = $variation_id;
      }
    }
    // Replace the old results with the results without duplicates.
    $view->result = $resultNoDoubleNodes;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function iq_commerce_preprocess_commerce_order_receipt(&$variables) {
  $iq_commerce_settings = \Drupal\iq_commerce\Form\IqCommerceSettingsForm::getIqCommerceSettings();
  $variables['iq_commerce_footer'] =  $iq_commerce_settings['footer']['value'];
  $variables['iq_commerce_header'] =  $iq_commerce_settings['header']['value'];
  $variables['iq_commerce_homepage'] = \Drupal\Core\Url::fromRoute('<front>');
}

/**
 * Implements hook_page_attachments().
 */
function iq_commerce_page_attachments(array &$attachments) {
  $attachments['#attached']['library'][] = 'iq_commerce/catalog';
  $attachments['#attached']['library'][] = 'iq_commerce/categories';
  $attachments['#attached']['library'][] = 'iq_commerce/checkout';
  $attachments['#attached']['library'][] = 'iq_commerce/customer';
}

